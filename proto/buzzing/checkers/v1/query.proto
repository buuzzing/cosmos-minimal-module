// query.proto 文件定义了查询游戏状态的请求和响应消息
syntax = "proto3";
package buzzing.checkers.v1;

option go_package = "github.com/buzzing/checkers";

import "buzzing/checkers/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "gogoproto/gogo.proto";

// Query 定义了模块的查询 gRPC 服务
service Query {
    // rpc 服务的方法名，参数和返回值
    rpc GetGame(QueryGetGameRequest) returns (QueryGetGameResponse) {
        // cosmos.query.v1.module_query_safe 注解参见:
        // https://docs.cosmos.network/main/build/building-modules/query-services#calling-queries-from-the-state-machine
        // 标记该查询是确定性的: 给定块高度，多次调用返回相同结果
        option (cosmos.query.v1.module_query_safe) = true;
        // google.api.http 为 gRPC-Gateway 的注解，用于将查询服务暴露为 HTTP REST API
        // 请求方法为 GET
        // 请求路径为 /buzzing/checkers/v1/game/{index}，其中 index 为查询的游戏的索引
        option (google.api.http).get =
            "/buzzing/checkers/v1/game/{index}";
    }

    rpc GetRecordList(QueryGetRecordListRequest)
        returns (QueryGetRecordListResponse);
}

// QueryGetGameRequest 是查询游戏状态的请求消息
message QueryGetGameRequest {
    // index 为需要查询的游戏的索引
    string index = 1;
}

// QueryGetGameResponse 是查询游戏状态的响应消息
message QueryGetGameResponse {
    // Game 是查询到的游戏状态
    StoredGame Game = 1;
}

message QueryGetRecordListRequest {}

message QueryGetRecordListResponse {
    repeated string records = 1;
}